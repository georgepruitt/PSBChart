#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 19, 2021 09:21:40 PM EST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import TradingSimula_18Chart_support
from TradingSimula_18Chart_support import ManageTrades

from tkinter import simpledialog
from tkinter import *

def only_numbers(char):
    return char.isdigit()


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, T
    root = tk.Tk()
    top = Toplevel1 (root)
#    root = tk.Tk()

    root = tk.Tk()
    root.call('wm', 'attributes', '.', '-topmost', '1')
    T = tk.Text(root,height=10,width=70)
    l = tk.Label(root, text="Data Window")
    l.pack()
    T.pack(side=tk.RIGHT, fill = tk.Y)

 #   T.title = "Data Window"

    TradingSimula_18Chart_support.init(root, top, T)
    ##s.pack(side=tk.RIGHT, fill = tk.Y)'''
    #T.attributes('-topmost', 'true')
    root.mainloop()

w = None
T = None
indicList = list([])
tradeInfo = ManageTrades()
##def create_Toplevel1(rt, *args, **kwargs):
##    '''Starting point when module is imported by another module.
##       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
##    global w, w_win, root
##    #rt = root
##    root = rt
##    w = tk.Toplevel (root)
##    top = Toplevel1 (w)
##    TradingSimula_18Chart_support.init(w, top, *args, **kwargs)
##    return (w, top)

def destroy_Toplevel1():
    global w,T
    w.destroy()
    T.destroy()
    w = None
    T = None


class MyDialog(simpledialog.Dialog):

    def body(self, master):

        Label(master, text="MovAvg1:").grid(row=0)
        Label(master, text="MovAvg2:").grid(row=1)
        Label(master, text="MovAvg3:").grid(row=2)

        self.title("Moving Averages Inputs")

        self.e1 = Entry(master)
        self.e2 = Entry(master)
        self.e3 = Entry(master)

        self.e1.grid(row=0, column=1)
        self.e2.grid(row=1, column=1)
        self.e3.grid(row=2, column=1)

        return self.e1 # initial focus

    def apply(self):
        first = int(self.e1.get())
        second = int(self.e2.get())
        third = int(self.e3.get())
        indicList.append("movAvg")
        indicList.append(first)
        indicList.append(second)
        indicList.append(third)
        print (first, second) # or something
        TradingSimula_18Chart_support.loadAndDraw(False,True,0,indicList,tradeInfo)

class BollingerDialog(simpledialog.Dialog):

    def body(self, master):

        Label(master, text="MovAvgLen:").grid(row=0)
        Label(master, text="Num+StdDevs").grid(row=1)
        Label(master, text="Num-StdDevs").grid(row=2)

        self.e1 = Entry(master)
        self.e2 = Entry(master)
        self.e3 = Entry(master)

        self.e1.grid(row=0, column=1)
        self.e2.grid(row=1, column=1)
        self.e3.grid(row=2, column=1)

        return self.e1 # initial focus

    def apply(self):
        first = int(self.e1.get())
        second = float(self.e2.get())
        third = float(self.e3.get())

        inList = "bollingerBand" in indicList
        if inList:
            indicIndex = indicList.index("bollingerBand")
            del indicList[indicIndex:indicIndex+4]
        indicList.append("bollingerBand")
        indicList.append(first)
        indicList.append(second)
        indicList.append(third)
        print (first, second) # or something
        TradingSimula_18Chart_support.loadAndDraw(False,True,0,indicList,tradeInfo)

class DonchianDialog(simpledialog.Dialog):

    def body(self, master):

        Label(master, text="DonchianLen 1:").grid(row=0)
        Label(master, text="DonchianLen 2:").grid(row=1)

        validation = master.register(only_numbers)

        self.e1 = Entry(master,validate="key", validatecommand=(validation, '%S'))
        self.e2 = Entry(master,validate="key", validatecommand=(validation, '%S'))

        self.e1.grid(row=0, column=1)
        self.e2.grid(row=1, column=1)

        return self.e1 # initial focus

    def apply(self):

        first = int(self.e1.get())
        second = int(self.e2.get())


        inList = "donchianChan" in indicList
        if inList:
            indicIndex = indicList.index("donchianChan")
            del indicList[indicIndex:indicIndex+3]
        indicList.append("donchianChan")
        indicList.append(first)
        indicList.append(second)
        print (first, second) # or something
        TradingSimula_18Chart_support.loadAndDraw(False,True,0,indicList,tradeInfo)

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1472x705+22+16")
        top.minsize(120, 1)
        top.maxsize(1540, 825)
        top.resizable(1,  1)
        top.title("TradingSimula-18 Charting")
        top.configure(background="#d9d9d9")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="File")
        self.sub_menu.add_command(
                label="Chart Price Data",
                command=TradingSimula_18Chart_support.loadData)
        self.sub_menu.add_command(
                label="Plot Trades File")
        self.sub_menu.add_separator(
)
        self.sub_menu.add_command(
                label="Quit")
        self.sub_menu1 = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                label="Indicator")
        self.sub_menu1.add_command(
                label="Simple Mov. Average",
                command =lambda:  MyDialog(root))
        self.sub_menu1.add_command(
                label="Exponential Mov. Average")
        self.sub_menu1.add_command(
                label="Weighted Mov. Average")
        self.sub_menu1.add_command(
                label="Bollinger Bands",
                command =lambda:  BollingerDialog(root))
        self.sub_menu1.add_command(
                label="Donchian Channels",
                command =lambda:  DonchianDialog(root))
        self.sub_menu1.add_command(
                label="Keltner Channels")
        self.sub_menu1.add_command(
                label="RSI Oscillator")
        self.sub_menu1.add_command(
                label="MACD Oscillator")
        self.sub_menu1.add_command(
                label="Stochastic Oscillator")

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.007, rely=0.936, height=20, relwidth=0.084)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.095, rely=0.936, height=21, width=200)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''< - - -  Starting Date YYYYMMDD''')

        self.Canvas1 = tk.Canvas(top)
#       self.Canvas1.place(relx=0.067, rely=0.014, relheight=0.631, relwidth=0.926)
        self.Canvas1.place(relx=0.067, rely=0.014, height=445, width=1363)
        self.Canvas1.configure(background="#000000")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")
 #       self.Canvas1.configure(width=1200)


        self.Canvas2 = tk.Canvas(top)
        self.Canvas2.place(relx=0.067, rely=0.713, relheight=0.203
                , relwidth=0.926)
        self.Canvas2.configure(background="#000000")
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(insertbackground="black")
        self.Canvas2.configure(relief="ridge")
        self.Canvas2.configure(selectbackground="blue")
        self.Canvas2.configure(selectforeground="white")

        self.Scale1 = tk.Scale(top, from_=0.0, to=100.0)
        self.Scale1.place(relx=0.074, rely=0.643, relwidth=0.922, relheight=0.0
                , height=42, bordermode='ignore')
        self.Scale1.configure(activebackground="#ececec")
        self.Scale1.configure(background="#d9d9d9")
        self.Scale1.configure(foreground="#000000")
        self.Scale1.configure(highlightbackground="#d9d9d9")
        self.Scale1.configure(highlightcolor="black")
        self.Scale1.configure(orient="horizontal")
        self.Scale1.configure(troughcolor="#d9d9d9")
#        self.Scale1.configure(command=TradingSimula_18Chart_support.upDateScale)
        self.Scale1.bind("<ButtonRelease-1>",TradingSimula_18Chart_support.upDateScale)
#        self.Scale1.bind("<ButtonRelease-1>",lambda:  TradingSimula_18Chart_support.upDateScale(indicList,tradeInfo))

#        command=lambda:  PSBChart_support.loadAndDraw(False,True,1,indicList,tradeInfo)

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.002, rely=0.113, height=24, width=93)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(command=lambda:  TradingSimula_18Chart_support.loadAndDraw(False,True,0,indicList.clear(),tradeInfo));
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Clear Indicators''')

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.007, rely=0.172, height=24, width=67)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Button''')

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.007, rely=0.228, height=24, width=67)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Button''')

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.007, rely=0.285, height=24, width=67)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Button''')

        self.Button5 = tk.Button(top)
        self.Button5.place(relx=0.007, rely=0.865, height=34, width=77)
        self.Button5.configure(activebackground="#ececec")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Redraw''')

if __name__ == '__main__':
    vp_start_gui()





